def max_heapify(arr, n, i):
    largest = i  # Initialize largest as root
    left = 2 * i
    right = 2 * i + 1

    # If left child is larger than root
    if left < n and arr[left] > arr[largest]:
        largest = left

    # If right child is larger than largest so far
    if right < n and arr[right] > arr[largest]:
        largest = right

    # If largest is not root
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]  # Swap
        # Recursive call until it goes to right place (floating down)
        max_heapify(arr, n, largest)


def build_max_heap(arr):
    n = len(arr)
    # Build a max heap.
    # Starting from last non-leaf node and heapifying all internal nodes in bottom up manner
    for i in range(n / 2 - 1, -1, -1):
        max_heapify(arr, n, i)


def heap_sort(arr):
    build_max_heap(arr)
    # Extract elements one by one from the heap
    for i in range(len(arr) - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # Swap root with last element
        max_heapify(arr, i, 0)  # call max heapify on the reduced heap


# Example usage:
arr = [64, 34, 25, 12, 22, 11, 90]
heap_sort(arr)
print("Sorted array using Heap Sort:", arr)
